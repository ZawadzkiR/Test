import ipywidgets as widgets
from IPython.display import display, clear_output
import importlib.util
import sys
import subprocess
import argparse
import os

# Ścieżki do skryptów
scripts = {
    "kod1": "/path/to/kod1.py",
    "kod2": "/path/to/kod2.py"
}

# Funkcja do ładowania argumentów
def load_args(script_path):
    args = {}
    try:
        # Importowanie skryptu jako modułu
        spec = importlib.util.spec_from_file_location("module.name", script_path)
        module = importlib.util.module_from_spec(spec)
        sys.modules["module.name"] = module
        spec.loader.exec_module(module)

        # Sprawdzenie, czy parser istnieje globalnie
        if hasattr(module, "parser") and isinstance(module.parser, argparse.ArgumentParser):
            parser = module.parser
            for action in parser._actions:
                if action.dest != "help":  # Pomijamy akcję pomocy
                    args[action.dest] = action.default
    except Exception as e:
        print(f"Błąd podczas wczytywania argumentów: {e}")
    return args

# Funkcja do uruchamiania skryptu
def run_script(script_path, args, output_box):
    cmd = ["python3", script_path]
    for key, value in args.items():
        cmd.append(f"--{key}")
        cmd.append(str(value))
    
    try:
        with output_box:
            clear_output()
            print(f"Uruchamianie skryptu: {os.path.basename(script_path)}")
            print(f"Argumenty: {args}")
            print("\n=== WYNIK ===")
            
            # Ustawienie środowiska Jupyter do wyświetlania
            subprocess.run(cmd, text=True, capture_output=False, check=True)
    except subprocess.CalledProcessError as e:
        with output_box:
            print("\n=== BŁĄD ===")
            print(e.stderr)
    except Exception as e:
        with output_box:
            print("\n=== WYJĄTEK ===")
            print(str(e))

# Funkcja do tworzenia interfejsu jako zakładki
def create_script_tab():
    # Dropdown do wyboru skryptu
    script_dropdown = widgets.Dropdown(
        options=[""] + list(scripts.keys()),
        description="Skrypt:"
    )

    # Kontener na dynamiczne pola argumentów
    args_box = widgets.VBox()
    
    # Przycisk do uruchamiania skryptu
    run_button = widgets.Button(description="Uruchom")
    
    # Pole do wyświetlania wyników
    output_box = widgets.Output()
    
    # Obsługa zmiany wyboru skryptu
    def on_script_change(change):
        if not change.new:
            args_box.children = []
            return
        
        script_path = scripts.get(change.new)
        if script_path:
            args = load_args(script_path)
            fields = []
            for arg, default in args.items():
                field = widgets.Text(value=str(default), description=f"{arg}:")
                fields.append(field)
            args_box.children = fields
    
    # Obsługa przycisku uruchamiania
    def on_run_button_click(b):
        selected_script = script_dropdown.value
        if not selected_script:
            with output_box:
                clear_output()
                print("Nie wybrano skryptu.")
            return
        
        script_path = scripts.get(selected_script)
        if not script_path:
            with output_box:
                clear_output()
                print("Nie znaleziono ścieżki do skryptu.")
            return
        
        # Zbieranie argumentów
        args = {}
        for field in args_box.children:
            args[field.description[:-1]] = field.value
        
        # Uruchamianie skryptu i wyświetlanie wyników
        run_script(script_path, args, output_box)
    
    # Powiązanie zdarzeń
    script_dropdown.observe(on_script_change, names="value")
    run_button.on_click(on_run_button_click)
    
    # Zwrócenie widgetu
    return widgets.VBox([script_dropdown, args_box, run_button, output_box])

# Przykładowe użycie w Tabie
tab = widgets.Tab()

# Tworzenie zakładki skryptu
script_tab = create_script_tab()

# Dodanie zakładki do Tabu
tab.children = [script_tab]  # Możesz dodać więcej zakładek
tab.set_title(0, "Skrypt")   # Tytuł zakładki

display(tab)
