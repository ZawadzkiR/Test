import os
import pandas as pd
from atlassian import Confluence

# Funkcja do rekurencyjnego wyszukiwania plików README i tworzenia markdown

def create_markdown_from_readme(directory, output_file, table_output_file):
    table_of_contents = ["# Spis treści"]
    content = []
    access_data = []

    for root, _, files in os.walk(directory):
        readme_files = [f for f in files if f.lower().startswith("readme")]
        
        if readme_files:
            relative_path = os.path.relpath(root, directory)
            depth = relative_path.count(os.sep)
            header_id = relative_path.replace(os.sep, "-").replace(" ", "-").lower()
            header = f"{'#' * (depth + 1)} {relative_path}"
            link = f"[{relative_path}](#{header_id})"
            table_of_contents.append(f"{'  ' * depth}- {link}")

            content.append(f"<a id='{header_id}'></a>")  # Anchor for navigation
            content.append(header)

            for readme in readme_files:
                with open(os.path.join(root, readme), 'r', encoding='utf-8') as f:
                    content.append(f"\n*Plik: {readme}*\n")
                    readme_content = f.read()
                    content.append(readme_content)

                    # Wyszukiwanie tabeli "Dostępny"
                    if "| Nazwa | Źródło | Level |" in readme_content:
                        table_start = readme_content.index("| Nazwa | Źródło | Level |")
                        table_lines = readme_content[table_start:].splitlines()

                        # Dodanie wierszy do tabeli
                        for line in table_lines[1:]:
                            if line.strip() == "" or not line.startswith("|"):
                                break
                            columns = [col.strip() for col in line.strip('|').split('|')]
                            if len(columns) == 3:
                                access_data.append(columns)

    # Zapis do pliku markdown
    with open(output_file, 'w', encoding='utf-8') as md:
        md.write("\n".join(table_of_contents))
        md.write("\n\n")
        md.write("\n\n".join(content))

    # Tworzenie tabeli dostępu i zapis do pliku
    if access_data:
        df = pd.DataFrame(access_data, columns=["Nazwa", "Źródło", "Level"])
        df.sort_values(by="Źródło", inplace=True)
        with open(table_output_file, 'w', encoding='utf-8') as tf:
            tf.write(df.to_markdown(index=False))

# Funkcja do przesłania markdown na Atlassian Wiki
def upload_to_atlassian_wiki(confluence_url, username, api_token, space_key, parent_page_id, page_title, markdown_file):
    # Inicjalizacja Confluence API
    confluence = Confluence(
        url=confluence_url,
        username=username,
        password=api_token
    )

    # Odczyt markdown
    with open(markdown_file, 'r', encoding='utf-8') as f:
        markdown_content = f.read()

    # Utworzenie strony
    confluence.create_page(
        space=space_key,
        parent_id=parent_page_id,
        title=page_title,
        body=markdown_content,
        representation='wiki'
    )

if __name__ == "__main__":
    # Ścieżka do katalogu z plikami README
    source_directory = "sciezka/do/katalogu"
    output_markdown = "output.md"
    table_output_markdown = "access_table.md"

    # Tworzenie markdown z plików README
    create_markdown_from_readme(source_directory, output_markdown, table_output_markdown)

    # Konfiguracja Confluence
    confluence_url = "https://twoja_domena.atlassian.net/wiki"
    username = "twoj_email"
    api_token = "twoj_api_token"
    space_key = "KEY"
    parent_page_id = "123456"
    page_title = "Zebrane README"

    # Przesyłanie na Atlassian Wiki
    upload_to_atlassian_wiki(confluence_url, username, api_token, space_key, parent_page_id, page_title, output_markdown)
