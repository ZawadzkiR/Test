import ipywidgets as widgets
from IPython.display import display, clear_output, display
import importlib.util
import sys
import subprocess
import argparse
import warnings
import io
import contextlib
import matplotlib.pyplot as plt

# Wyłączanie warningów
warnings.filterwarnings("ignore")

# Ścieżki do skryptów
scripts = {
    "kod1": "/path/to/kod1.py",
    "kod2": "/path/to/kod2.py"
}

# Funkcja do ładowania argumentów
def load_args(script_path):
    args = {}
    try:
        # Importowanie skryptu jako modułu
        spec = importlib.util.spec_from_file_location("module.name", script_path)
        module = importlib.util.module_from_spec(spec)
        sys.modules["module.name"] = module
        spec.loader.exec_module(module)

        # Sprawdzenie, czy parser istnieje globalnie
        if hasattr(module, "parser") and isinstance(module.parser, argparse.ArgumentParser):
            parser = module.parser
            for action in parser._actions:
                if action.dest != "help":  # Pomijamy akcję pomocy
                    args[action.dest] = action.default
    except Exception as e:
        print(f"Błąd podczas wczytywania argumentów: {e}")
    return args

# Funkcja do uruchamiania skryptu
def run_script(script_path, args, module=None):
    cmd = ["python3", script_path]
    for key, value in args.items():
        cmd.append(f"--{key}")
        cmd.append(str(value))

    try:
        if module is not None and hasattr(module, "main"):
            # Jeśli moduł ma funkcję main(), uruchamiamy ją
            module.main()
            return "Kod uruchomiony pomyślnie bez argumentów."
        
        result = subprocess.run(cmd, text=True, capture_output=True)
        return result.stdout, result.stderr
    except Exception as e:
        return "", str(e)

# Funkcja do uchwycenia printów w output_box
def capture_prints(func):
    """Pomaga przechwytywać printy z funkcji, by wyświetlić je w output_box."""
    with io.StringIO() as buf, contextlib.redirect_stdout(buf):
        func()
        return buf.getvalue()

# Funkcja do tworzenia interfejsu jako zakładki
def create_script_tab():
    # Dropdown do wyboru skryptu
    script_dropdown = widgets.Dropdown(
        options=[""] + list(scripts.keys()),
        description="Skrypt:"
    )

    # Kontener na dynamiczne pola argumentów
    args_box = widgets.VBox()
    
    # Przycisk do uruchamiania skryptu
    run_button = widgets.Button(description="Uruchom")
    
    # Pole do wyświetlania wyników
    output_box = widgets.Output()

    # Obsługa zmiany wyboru skryptu
    def on_script_change(change):
        if not change.new:
            args_box.children = []
            return
        
        script_path = scripts.get(change.new)
        if script_path:
            args = load_args(script_path)
            fields = []
            try:
                spec = importlib.util.spec_from_file_location("module.name", script_path)
                module = importlib.util.module_from_spec(spec)
                sys.modules["module.name"] = module
                spec.loader.exec_module(module)
                
                # Jeśli skrypt ma funkcję main, ustawiamy ją
                if hasattr(module, "main"):
                    args = {}  # Skrypt nie potrzebuje argumentów, ponieważ używa funkcji main
            except Exception as e:
                print(f"Błąd podczas ładowania skryptu: {e}")
                
            # Tworzymy pola argumentów tylko, jeśli skrypt ma parser
            fields = []
            for arg, default in args.items():
                field = widgets.Text(value=str(default), description=f"{arg}:")
                fields.append(field)
            args_box.children = fields
    
    # Obsługa przycisku uruchamiania
    def on_run_button_click(b):
        # Blokowanie przycisku i dropdowna
        run_button.disabled = True
        script_dropdown.disabled = True
        
        with output_box:
            clear_output(wait=True)  # Czyszczenie poprzednich wyników

            selected_script = script_dropdown.value
            if not selected_script:
                print("Nie wybrano skryptu.")
                return
            
            script_path = scripts.get(selected_script)
            if not script_path:
                print("Nie znaleziono ścieżki do skryptu.")
                return
            
            # Zbieranie argumentów
            args = {}
            for field in args_box.children:
                args[field.description[:-1]] = field.value
            
            # Wyświetlanie informacji o uruchamianym skrypcie
            print(f"Uruchamiam skrypt {selected_script} z argumentami: {args}")
            
            try:
                spec = importlib.util.spec_from_file_location("module.name", script_path)
                module = importlib.util.module_from_spec(spec)
                sys.modules["module.name"] = module
                spec.loader.exec_module(module)

                # Uruchamiamy skrypt
                result = run_script(script_path, args, module)

                # Sprawdzanie, czy skrypt zwrócił tekst
                if isinstance(result, tuple):
                    stdout, stderr = result

                    # Przechwycenie printów w stdout
                    print_output = capture_prints(lambda: print(stdout))
                    print_error = capture_prints(lambda: print(stderr))
                    
                    if print_output:
                        print("=== OUTPUT ===")
                        print(print_output)
                    
                    # Sprawdzanie błędów
                    if stderr:
                        print("=== ERROR ===")
                        print(stderr)
                    else:
                        print("Brak błędów.")
                
                # Informacja o sukcesie
                if not isinstance(result, tuple) and result == "Kod uruchomiony pomyślnie bez argumentów.":
                    print(result)

                # Wyświetlanie wykresów
                if hasattr(module, 'generate_plots') and callable(getattr(module, 'generate_plots')):
                    # Zakładamy, że skrypt ma funkcję 'generate_plots', która generuje wykresy
                    fig = module.generate_plots()  # Załóżmy, że ta funkcja generuje wykres
                    if fig:
                        display(fig)

            except Exception as e:
                print(f"Błąd: {e}")
        
        # Odblokowanie przycisku i dropdowna
        run_button.disabled = False
        script_dropdown.disabled = False

    # Powiązanie zdarzeń
    script_dropdown.observe(on_script_change, names="value")
    run_button.on_click(on_run_button_click)
    
    # Zwrócenie widgetu (zamiast wywoływania)
    return widgets.VBox([script_dropdown, args_box, run_button, output_box])

# Przykładowe użycie w Tabie
tab = widgets.Tab()

# Tworzenie zakładki skryptu
script_tab = create_script_tab()

# Dodanie zakładki do Tabu
tab.children = [script_tab]  # Możesz dodać więcej zakładek
tab.set_title(0, "Skrypt")   # Tytuł zakładki

display(tab)
