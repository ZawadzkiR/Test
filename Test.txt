import os
import yaml
import subprocess
import getpass
import tempfile

# Ścieżki
PYTHON_PATH = subprocess.check_output(["which", "python3"]).decode().strip()
RUNNER_PATH = os.path.abspath("runner.py")
CURRENT_USER = getpass.getuser()

# Wczytaj YAML
with open("tasks.yaml") as f:
    tasks = yaml.safe_load(f)

# Filtruj tylko taski przypisane do aktualnego użytkownika
def task_applies_to_user(task, user):
    users = task.get("user", user)
    if isinstance(users, str):
        return users == user
    elif isinstance(users, list):
        return user in users
    return False

filtered_tasks = {
    name: task for name, task in tasks.items()
    if task_applies_to_user(task, CURRENT_USER)
}

# Zbuduj unikalne wpisy crona (schedule + command)
seen_entries = set()
new_entries = []

for task_name, task in filtered_tasks.items():
    schedules = task.get("schedule")
    enabled = task.get("enabled", True)

    if not schedules:
        continue

    if isinstance(schedules, str):
        schedules = [schedules]

    if "command" in task:
        command = task["command"]
    elif "jobs" in task:
        job_args = " ".join(task["jobs"])
        command = f"{PYTHON_PATH} {RUNNER_PATH} {job_args}"
    else:
        continue  # źle zdefiniowany task

    for schedule in schedules:
        key = (schedule, command)
        if key in seen_entries:
            continue
        seen_entries.add(key)

        line = f"{schedule} {command} >> /tmp/{task_name}.log 2>&1  # Automate: {task_name}"
        if not enabled:
            line = f"# {line}"
        new_entries.append(line)

# Pobierz obecny crontab użytkownika
result = subprocess.run(["crontab", "-l"], capture_output=True, text=True)
existing_cron = result.stdout if result.returncode == 0 else ""

# Usuń poprzednie # Automate:
filtered_lines = [line for line in existing_cron.splitlines() if "# Automate:" not in line]

# Dodaj nowe unikalne wpisy
final_cron = "\n".join(filtered_lines + new_entries) + "\n"

# Zapisz i załaduj
with tempfile.NamedTemporaryFile(delete=False, mode="w") as tmpfile:
    tmpfile.write(final_cron)
    tmpfile_path = tmpfile.name

subprocess.run(["crontab", tmpfile_path])
os.unlink(tmpfile_path)

print(f"✅ Crontab zaktualizowany dla użytkownika: {CURRENT_USER}")
