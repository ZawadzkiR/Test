from flask import Flask, render_template, request, Response
import subprocess
import traceback
import threading
import time
import importlib

app = Flask(__name__)

processes = {
    'script1': 'script1',
    'script2': 'script2'
}

running_processes = {}
output_logs = {}

# Funkcja do dynamicznego pobierania argumentów z parsera
def get_script_args(module_name):
    module = importlib.import_module(module_name)
    parser = getattr(module, 'parser', None)

    if parser is None:
        return {}

    args_info = {}
    for action in parser._actions:
        if action.dest != 'help':
            arg_data = {
                'type': action.type.__name__ if action.type else 'str',
                'default': action.default,
            }
            args_info[action.dest] = arg_data
    return args_info

# Funkcja do uruchamiania procesu w tle
def run_process_in_background(process_name, command):
    process = subprocess.Popen(command, stdout=subprocess.PIPE, stderr=subprocess.PIPE, text=True, shell=True)
    running_processes[process_name] = process
    output_logs[process_name] = []  # Resetowanie logów przed uruchomieniem
    process_completed = False  # Flaga zakończenia procesu

    # Dodanie komunikatu o uruchomieniu skryptu
    output_logs[process_name].append(f"Uruchomienie kodu {command}...")

    # Czytanie outputu procesu
    while True:
        output = process.stdout.readline()
        if output:
            output_logs[process_name].append(output.strip())

        error = process.stderr.readline()
        if error:
            # Dodajemy błąd do logów
            output_logs[process_name].append(f"<span style='color:red;'>{error.strip()}</span>")

        if process.poll() is not None:
            if not process_completed:
                if process.returncode == 0:
                    output_logs[process_name].append("<span style='color:green;'>Proces zakończony powodzeniem</span>")
                else:
                    # Przechwytywanie pełnego błędu z stderr
                    error_output, _ = process.communicate()
                    if error_output.strip():
                        output_logs[process_name].append(f"<span style='color:red;'>Błąd: proces zakończony niepowodzeniem</span>")
                        output_logs[process_name].append(f"<pre>{error_output.strip()}</pre>")
                    else:
                        output_logs[process_name].append("<span style='color:red;'>Błąd: proces zakończony niepowodzeniem, brak szczegółowych informacji.</span>")
                process_completed = True

            break


@app.route('/', methods=['GET', 'POST'])
def index():
    script_args = {}
    process_name = None

    if request.method == 'POST':
        if 'process' in request.form:
            process_name = request.form['process']
            script_args = get_script_args(process_name)

        elif 'run_script' in request.form:
            process_name = request.form['run_script']
            script_args = get_script_args(process_name)

            # Zbieramy argumenty z formularza
            args = {}
            for arg_name in script_args.keys():
                args[arg_name] = request.form.get(arg_name)

            # Budujemy komendę z dynamicznymi argumentami
            command = f'python -m {process_name} ' + ' '.join([f'--{k} {v}' for k, v in args.items()])

            output_logs[process_name] = []

            # Uruchamiamy proces w tle
            process_thread = threading.Thread(target=run_process_in_background, args=(process_name, command))
            process_thread.start()

    return render_template('index.html', processes=processes, script_args=script_args, process_name=process_name)

@app.route('/output/<process_name>')
def output(process_name):
    def generate():
        previous_output_length = 0
        while True:
            if process_name in output_logs:
                current_log = output_logs[process_name]
                if len(current_log) > previous_output_length:
                    for line in current_log[previous_output_length:]:
                        yield f"data:{line}\n\n"
                    previous_output_length = len(current_log)

                # Zakończ strumień, jeśli proces został zakończony
                if current_log and "Proces zakończony" in current_log[-1]:
                    yield "data:Proces zakończony\n\n"
                    break  # Zakończ strumień

            time.sleep(0.1)

    return Response(generate(), mimetype='text/event-stream')

if __name__ == '__main__':
    app.run(debug=True)



<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Script Runner</title>
    <style>
        body {
            font-family: Arial, sans-serif;
            background-color: #f4f4f4;
            color: #333;
        }
        h1, h2 {
            color: #444;
        }
        #output {
            border: 1px solid #000;
            padding: 10px;
            max-height: 400px;
            overflow-y: auto;
            background-color: black; /* Czarny kolor tła */
            color: white; /* Biały kolor tekstu */
        }
        .error {
            color: red;
        }
        .success {
            color: green;
        }
    </style>
</head>
<body>
    <h1>Wybierz skrypt i uruchom</h1>

    <!-- Dropdown do wyboru skryptu -->
    <form method="POST">
        <label for="process">Wybierz skrypt:</label>
        <select name="process" id="process" onchange="this.form.submit()">
            <option value="">-- Wybierz skrypt --</option>
            {% for key, value in processes.items() %}
                <option value="{{ key }}" {% if process_name == key %}selected{% endif %}>{{ key }}</option>
            {% endfor %}
        </select>
    </form>

    <!-- Formularz z argumentami skryptu -->
    {% if script_args %}
    <form method="POST">
        <input type="hidden" name="run_script" value="{{ process_name }}">
        <h2>Argumenty dla {{ process_name }}</h2>
        {% for arg_name, arg_data in script_args.items() %}
            <label for="{{ arg_name }}">{{ arg_name }}:</label>
            <input type="text" name="{{ arg_name }}" value="{{ arg_data.default }}" id="{{ arg_name }}"><br>
        {% endfor %}
        <button type="submit">Uruchom skrypt</button>
    </form>
    {% else %}
    <p>Wybierz skrypt, aby zobaczyć jego argumenty.</p>
    {% endif %}

    <!-- Okienko do wyświetlania outputu w czasie rzeczywistym -->
    <h2>Output:</h2>
    <pre id="output"></pre>

    <script>
        let source = null;  // Zmienna do przechowywania instancji EventSource

        // Funkcja do streamowania danych w czasie rzeczywistym
        function startEventSource(processName) {
            // Zamykanie poprzedniego połączenia, jeśli istnieje
            if (source) {
                source.close();
            }

            // Resetowanie outputu na nowe uruchomienie
            const outputElement = document.getElementById("output");
            outputElement.innerHTML = ""; // Czyszczenie poprzedniego wyjścia

            // Tworzenie nowego EventSource
            source = new EventSource("/output/" + processName);

            source.onmessage = function(event) {
                // Dodawanie nowych danych do outputu
                outputElement.innerHTML += event.data + "\n";
                outputElement.scrollTop = outputElement.scrollHeight; // Automatyczne przewijanie

                // Sprawdzanie, czy wiadomość końcowa jest odebrana
                if (event.data.includes("Proces zakończony")) {
                    source.close(); // Zamknięcie połączenia
                }
            };

            source.onerror = function(event) {
                console.error("EventSource error:", event);
                source.close();  // Zamknięcie połączenia w przypadku błędu
            };
        }

        // Funkcja do uruchomienia skryptu
        function runScript() {
            const processName = document.querySelector('input[name="run_script"]').value;
            if (processName) {
                startEventSource(processName);  // Rozpoczęcie streamowania danych
            }
        }

        // Wywołanie runScript() po załadowaniu strony, jeśli wybrano skrypt
        window.onload = function() {
            const processName = document.querySelector('input[name="run_script"]');
            if (processName) {
                runScript();  // Uruchomienie skryptu, jeśli jest wybrany
            }
        };

        function filterDropdown() {
            const input = document.getElementById('process').value.toLowerCase();
            const options = document.querySelectorAll('option');
            options.forEach(option => {
                if (option.value.toLowerCase().includes(input)) {
                    option.style.display = '';  // Pokaż, jeśli pasuje
                } else {
                    option.style.display = 'none';  // Ukryj, jeśli nie pasuje
                }
            });
        }
    </script>
</body>
</html>
