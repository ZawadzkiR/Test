from flask import Flask, render_template, request, jsonify
import sqlite3
import subprocess
import traceback
import threading

app = Flask(__name__)
running_process = None  # Flaga wskazująca, czy jakiś proces jest uruchomiony

# Połączenie z bazą danych SQLite
def get_db_connection():
    conn = sqlite3.connect('processes.db')
    conn.row_factory = sqlite3.Row
    return conn

# Strona główna: wyświetlanie procesów z przyciskami "Uruchom"
@app.route('/')
def index():
    conn = get_db_connection()
    processes = conn.execute('SELECT id, name, path FROM processes').fetchall()
    conn.close()
    return render_template('index.html', processes=processes)

# Uruchamianie procesu i zwracanie statusu
@app.route('/run_process/<int:process_id>', methods=['POST'])
def run_process(process_id):
    global running_process
    if running_process:
        return jsonify({'status': 'error', 'message': 'Inny proces jest już uruchomiony.'})

    conn = get_db_connection()
    process = conn.execute('SELECT * FROM processes WHERE id = ?', (process_id,)).fetchone()
    conn.close()

    if process is None:
        return jsonify({'status': 'error', 'message': 'Proces nie istnieje.'})

    running_process = True  # Ustawienie flagi na True, by zablokować inne przyciski
    output_log = []

    def execute_process():
        global running_process
        try:
            # Uruchamianie procesu i zapisywanie logów do listy `output_log`
            result = subprocess.run([process['path']], check=True, capture_output=True, text=True)
            output_log.append(result.stdout)
            status = 'success'
        except subprocess.CalledProcessError as e:
            output_log.append("Błąd:\n" + traceback.format_exc() + "\n" + e.stderr)
            status = 'error'
        finally:
            running_process = False  # Proces zakończony, odblokowanie przycisków

    # Tworzenie nowego wątku, aby proces działał asynchronicznie
    thread = threading.Thread(target=execute_process)
    thread.start()
    thread.join()  # Czekanie na zakończenie wątku

    return jsonify({'status': status, 'log': ''.join(output_log)})

if __name__ == '__main__':
    app.run(debug=True)



<!DOCTYPE html>
<html lang="pl">
<head>
    <meta charset="UTF-8">
    <title>Lista Procesów</title>
    <script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
</head>
<body>
    <h1>Lista Procesów</h1>
    <table border="1">
        <thead>
            <tr>
                <th>Nazwa procesu</th>
                <th>Ścieżka</th>
                <th>Akcja</th>
                <th>Status</th>
            </tr>
        </thead>
        <tbody>
            {% for process in processes %}
            <tr>
                <td>{{ process['name'] }}</td>
                <td>{{ process['path'] }}</td>
                <td><button onclick="runProcess({{ process['id'] }}, this)">Uruchom</button></td>
                <td id="status-{{ process['id'] }}"></td>
            </tr>
            {% endfor %}
        </tbody>
    </table>

    <div id="log-output" style="display: none;">
        <h2>Logi procesu:</h2>
        <pre id="log-content"></pre>
    </div>

    <script>
        function runProcess(processId, button) {
            // Blokowanie wszystkich przycisków "Uruchom"
            $("button").attr("disabled", true);

            $.post(`/run_process/${processId}`)
                .done(function(response) {
                    if (response.status === 'success') {
                        $('#status-' + processId).html('✅');
                    } else {
                        $('#status-' + processId).html('❌');
                    }

                    // Wyświetlenie logów
                    $('#log-content').text(response.log);
                    $('#log-output').show();
                })
                .fail(function() {
                    alert("Wystąpił błąd podczas uruchamiania procesu.");
                })
                .always(function() {
                    // Odblokowanie przycisków po zakończeniu procesu
                    $("button").attr("disabled", false);
                });
        }
    </script>
</body>
</html>
